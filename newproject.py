import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import folium
from folium import plugins
from streamlit_folium import st_folium
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LinearRegression

st.set_page_config(layout="wide")
st.title("üì¶ AI + IoT + ETA + –ì–µ–æ–∫–∞—Ä—Ç–∞: –ñ“Ø–∫ “õ–∞—É—ñ–ø—ñ–Ω –±–æ–ª–∂–∞—É –∂”ô–Ω–µ –¢–ú–¢–ú –º–∞—Ä—à—Ä—É—Ç—ã")

# --- 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è IoT-–¥–∞–Ω–Ω—ã—Ö ---
np.random.seed(0)
df = pd.DataFrame({
    "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_C": np.random.uniform(15, 35, 100),
    "—ã–ª“ì–∞–ª–¥—ã–ª—ã“õ_–ø–∞–π—ã–∑": np.random.uniform(30, 90, 100),
    "–≤–∏–±—Ä–∞—Ü–∏—è_GPS": np.random.uniform(0, 2, 100),
    "—Ä–∏—Å–∫_–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è": np.random.choice([0, 1], 100)
})
df['–Ω–æ–º–µ—Ä_–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'] = [f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {i+1}" for i in range(len(df))]

# --- 2. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ä–∏—Å–∫–∞ ---
X = df.drop(columns=["—Ä–∏—Å–∫_–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è", "–Ω–æ–º–µ—Ä_–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"])
y = df["—Ä–∏—Å–∫_–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"]
risk_model = RandomForestClassifier()
risk_model.fit(X, y)
df["–±–æ–ª–∂–∞—É_“õ–∞—É—ñ–ø"] = risk_model.predict(X)

# --- 3. –ì–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ---
coords_tmtn = [
    [36.0611, 103.8343], [44.2000, 80.4000], [43.2389, 76.8897],
    [43.6520, 51.1970], [40.4093, 49.8671], [41.7151, 44.8271],
    [40.6030, 43.0970], [36.8000, 34.6333]
]
lats, lons = zip(*coords_tmtn)
df["lat"] = np.random.choice(lats, size=len(df))
df["lon"] = np.random.choice(lons, size=len(df))

# --- 4. –ú–æ–¥–µ–ª—å ETA ---
eta_data = pd.DataFrame({
    "“õ–∞—à—ã“õ—Ç—ã“õ_–∫–º": np.random.uniform(100, 5000, 200),
    "–∂—ã–ª–¥–∞–º–¥—ã“õ_–∫–º_—Å–∞“ì": np.random.uniform(20, 80, 200),
    "–∫–µ–¥–µ–Ω_–∫–µ—à—ñ–≥—É—ñ_—Å–∞“ì–∞—Ç": np.random.uniform(0, 48, 200),
    "–ø–æ—Ä—Ç_–∫–µ—à—ñ–≥—É—ñ": np.random.uniform(0, 24, 200)
})
eta_data["ETA_—Å–∞“ì–∞—Ç"] = (
    eta_data["“õ–∞—à—ã“õ—Ç—ã“õ_–∫–º"] / eta_data["–∂—ã–ª–¥–∞–º–¥—ã“õ_–∫–º_—Å–∞“ì"] +
    eta_data["–∫–µ–¥–µ–Ω_–∫–µ—à—ñ–≥—É—ñ_—Å–∞“ì–∞—Ç"] + eta_data["–ø–æ—Ä—Ç_–∫–µ—à—ñ–≥—É—ñ"]
)
eta_model = LinearRegression()
eta_model.fit(eta_data.drop(columns=["ETA_—Å–∞“ì–∞—Ç"]), eta_data["ETA_—Å–∞“ì–∞—Ç"])

# --- 5. ETA –±–æ–ª–∂–∞—É —Ñ–æ—Ä–º–∞—Å—ã ---
st.subheader("‚è±Ô∏è ETA –±–æ–ª–∂–∞—É")

col1, col2, col3, col4 = st.columns(4)
“õ–∞—à—ã“õ—Ç—ã“õ = col1.number_input("“ö–∞—à—ã“õ—Ç—ã“õ (–∫–º)", 100, 10000, 1200)
–∂—ã–ª–¥–∞–º–¥—ã“õ = col2.number_input("–ñ—ã–ª–¥–∞–º–¥—ã“õ (–∫–º/—Å–∞“ì)", 10, 100, 60)
–∫–µ–¥–µ–Ω = col3.number_input("–ö–µ–¥–µ–Ω –∫–µ—à—ñ–≥—É—ñ (—Å–∞“ì)", 0, 72, 5)
–ø–æ—Ä—Ç = col4.number_input("–ü–æ—Ä—Ç –∫–µ—à—ñ–≥—É—ñ (—Å–∞“ì)", 0, 48, 3)

if "eta_result" not in st.session_state:
    st.session_state.eta_result = None

if st.button("ETA –µ—Å–µ–ø—Ç–µ—É"):
    eta_input = pd.DataFrame({
        "“õ–∞—à—ã“õ—Ç—ã“õ_–∫–º": [“õ–∞—à—ã“õ—Ç—ã“õ],
        "–∂—ã–ª–¥–∞–º–¥—ã“õ_–∫–º_—Å–∞“ì": [–∂—ã–ª–¥–∞–º–¥—ã“õ],
        "–∫–µ–¥–µ–Ω_–∫–µ—à—ñ–≥—É—ñ_—Å–∞“ì–∞—Ç": [–∫–µ–¥–µ–Ω],
        "–ø–æ—Ä—Ç_–∫–µ—à—ñ–≥—É—ñ": [–ø–æ—Ä—Ç]
    })
    eta_result = eta_model.predict(eta_input)[0]
    st.session_state.eta_result = eta_result

if st.session_state.eta_result is not None:
    st.success(f"üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–¥—ñ“£ –∂–µ—Ç—É —É–∞“õ—ã—Ç—ã: {st.session_state.eta_result:.1f} —Å–∞“ì–∞—Ç")

# --- 6. –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤ ---
st.subheader("üß≠ –¢–∞“£–¥–∞–ª“ì–∞–Ω –º–∞—Ä—à—Ä—É—Ç —É—á–∞—Å–∫–µ–ª–µ—Ä—ñ")

# –°–µ–≥–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ “ö–æ—Ä“ì–∞—Å
tmtn_segments_qorgas = [
    {"from": "–õ–∞–Ω—å—á–∂–æ—É", "to": "“ö–æ—Ä“ì–∞—Å", "coords": [[36.0611, 103.8343], [44.2000, 80.4000]]},
    {"from": "“ö–æ—Ä“ì–∞—Å", "to": "–ê–ª–º–∞—Ç—ã", "coords": [[44.2000, 80.4000], [43.2389, 76.8897]]},
    {"from": "–ê–ª–º–∞—Ç—ã", "to": "–ê“õ—Ç–∞—É", "coords": [[43.2389, 76.8897], [43.6520, 51.1970]]},
    {"from": "–ê“õ—Ç–∞—É", "to": "–ë–∞–∫—É", "coords": [[43.6520, 51.1970], [40.4093, 49.8671]]},
    {"from": "–ë–∞–∫—É", "to": "–¢–±–∏–ª–∏—Å–∏", "coords": [[40.4093, 49.8671], [41.7151, 44.8271]]},
    {"from": "–¢–±–∏–ª–∏—Å–∏", "to": "–ö–∞—Ä—Å", "coords": [[41.7151, 44.8271], [40.6030, 43.0970]]},
    {"from": "–ö–∞—Ä—Å", "to": "–ú–µ—Ä—Å–∏–Ω", "coords": [[40.6030, 43.0970], [36.8000, 34.6333]]}
]

# –°–µ–≥–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ “Æ—Ä—ñ–º—à—ñ
tmtn_segments_urumqi = [
    {"from": "–õ–∞–Ω—å—á–∂–æ—É", "to": "“Æ—Ä—ñ–º—à—ñ", "coords": [[36.0611, 103.8343], [43.8, 87.6]]},
    {"from": "“Æ—Ä—ñ–º—à—ñ", "to": "–ê–ª–º–∞—Ç—ã", "coords": [[43.8, 87.6], [43.2389, 76.8897]]},
    {"from": "–ê–ª–º–∞—Ç—ã", "to": "–ê“õ—Ç–∞—É", "coords": [[43.2389, 76.8897], [43.6520, 51.1970]]},
    {"from": "–ê“õ—Ç–∞—É", "to": "–ë–∞–∫—É", "coords": [[43.6520, 51.1970], [40.4093, 49.8671]]},
    {"from": "–ë–∞–∫—É", "to": "–¢–±–∏–ª–∏—Å–∏", "coords": [[40.4093, 49.8671], [41.7151, 44.8271]]},
    {"from": "–¢–±–∏–ª–∏—Å–∏", "to": "–ö–∞—Ä—Å", "coords": [[41.7151, 44.8271], [40.6030, 43.0970]]},
    {"from": "–ö–∞—Ä—Å", "to": "–ú–µ—Ä—Å–∏–Ω", "coords": [[40.6030, 43.0970], [36.8000, 34.6333]]}
]

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
selected_segments = []

# –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ “ö–æ—Ä“ì–∞—Å
if st.checkbox("–ú–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ “ö–æ—Ä“ì–∞—Å", value=True, key="route_qorgas"):
    selected_segments.extend(tmtn_segments_qorgas)

# –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ “Æ—Ä—ñ–º—à—ñ
if st.checkbox("–ú–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ “Æ—Ä—ñ–º—à—ñ", value=True, key="route_urumqi"):
    selected_segments.extend(tmtn_segments_urumqi)

# --- 7. ETA –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ ---
segments = []
for seg in selected_segments:
    dist = np.random.uniform(400, 1000)
    speed = np.random.uniform(35, 65)
    delay1 = np.random.uniform(1, 10)
    delay2 = np.random.uniform(1, 5)
    eta = dist / speed + delay1 + delay2
    segments.append({
        "–£—á–∞—Å—Ç–æ–∫": f"{seg['from']} ‚Üí {seg['to']}",
        "“ö–∞—à—ã“õ—Ç—ã“õ (–∫–º)": round(dist, 1),
        "–ñ—ã–ª–¥–∞–º–¥—ã“õ (–∫–º/—Å–∞“ì)": round(speed, 1),
        "–ö–µ–¥–µ–Ω –∫–µ—à—ñ–≥—É—ñ (—Å–∞“ì)": round(delay1, 1),
        "–ü–æ—Ä—Ç –∫–µ—à—ñ–≥—É—ñ (—Å–∞“ì)": round(delay2, 1),
        "ETA (—Å–∞“ì–∞—Ç)": round(eta, 1),
        "coords": seg["coords"]
    })

eta_total = sum(s["ETA (—Å–∞“ì–∞—Ç)"] for s in segments)
df_segments = pd.DataFrame(segments).drop(columns=["coords"])
st.success(f"üîÑ –ñ–∞–ª–ø—ã ETA —Ç–∞“£–¥–∞–ª“ì–∞–Ω –º–∞—Ä—à—Ä—É—Ç“õ–∞: {eta_total:.1f} —Å–∞“ì–∞—Ç")
st.dataframe(df_segments)
# --- 8. ETA –≥—Ä–∞—Ñ–∏–∫—Ç–µ—Ä—ñ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π) ---
st.subheader("üìà ETA —Ç–∞–ª–¥–∞—É—ã")

df_eta = pd.DataFrame(segments)

fig1, ax1 = plt.subplots(figsize=(8, 4))
sns.histplot(df_eta["ETA (—Å–∞“ì–∞—Ç)"], bins=10, kde=True, ax=ax1, color='skyblue')
ax1.set_title("ETA —Ç–∞—Ä–∞–ª—É—ã (—Ç–∞“£–¥–∞–ª“ì–∞–Ω —É—á–∞—Å–∫–µ–ª–µ—Ä –±–æ–π—ã–Ω—à–∞)")
ax1.set_xlabel("ETA (—Å–∞“ì–∞—Ç)")
st.pyplot(fig1)

fig2, ax2 = plt.subplots(figsize=(8, 4))
sns.scatterplot(
    data=df_eta,
    x="“ö–∞—à—ã“õ—Ç—ã“õ (–∫–º)",
    y="ETA (—Å–∞“ì–∞—Ç)",
    hue="–ñ—ã–ª–¥–∞–º–¥—ã“õ (–∫–º/—Å–∞“ì)",
    palette="viridis",
    ax=ax2
)
ax2.set_title("ETA vs “ö–∞—à—ã“õ—Ç—ã“õ (—Ç–∞“£–¥–∞–ª“ì–∞–Ω —É—á–∞—Å–∫–µ–ª–µ—Ä –±–æ–π—ã–Ω—à–∞)")
st.pyplot(fig2)

# --- 9. –ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ ---
st.subheader("üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç –∫–∞—Ä—Ç–∞—Å—ã (—Ç–∞“£–¥–∞–ª“ì–∞–Ω —É—á–∞—Å–∫–µ–ª–µ—Ä)")

map_route = folium.Map(location=[43.5, 70.0], zoom_start=4)

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É
for seg in segments:
    folium.PolyLine(
        locations=seg["coords"],
        tooltip=f"{seg['–£—á–∞—Å—Ç–æ–∫']}, ETA: {seg['ETA (—Å–∞“ì–∞—Ç)']} —Å–∞“ì",
        color="blue", weight=4, opacity=0.7
    ).add_to(map_route)

st_folium(map_route, width=1000, height=600)
# --- 10. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è—Å—ã –∏ –∫–∞—Ä—Ç–∞ ---
st.subheader("üìÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è—Å—ã")
df["–¥–∞—Ç–∞_–∂–µ—Ç–∫—ñ–∑—É"] = pd.date_range(start="2025-01-01", periods=len(df), freq="D")

col_d1, col_d2 = st.columns(2)
start_date = col_d1.date_input("–ë–∞—Å—Ç–∞–ø“õ—ã –¥–∞—Ç–∞", df["–¥–∞—Ç–∞_–∂–µ—Ç–∫—ñ–∑—É"].min().date())
end_date = col_d2.date_input("–°–æ“£“ì—ã –¥–∞—Ç–∞", df["–¥–∞—Ç–∞_–∂–µ—Ç–∫—ñ–∑—É"].max().date())

filter_risk = st.checkbox("üõë –¢–µ–∫ “õ–∞—É—ñ–ø—Ç—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–ª–µ—Ä–¥—ñ –∫”©—Ä—Å–µ—Ç—É", value=False)
search_query = st.text_input("üîç –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–¥—ñ —ñ–∑–¥–µ—É (–º—ã—Å–∞–ª—ã: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 12)", "")

filtered_df = df[
    (df["–¥–∞—Ç–∞_–∂–µ—Ç–∫—ñ–∑—É"].dt.date >= start_date) &
    (df["–¥–∞—Ç–∞_–∂–µ—Ç–∫—ñ–∑—É"].dt.date <= end_date)
]
if filter_risk:
    filtered_df = filtered_df[filtered_df["–±–æ–ª–∂–∞—É_“õ–∞—É—ñ–ø"] == 1]
if search_query:
    filtered_df = filtered_df[filtered_df["–Ω–æ–º–µ—Ä_–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"].str.contains(search_query, case=False)]

st.write(f"–ö”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–ª–µ—Ä —Å–∞–Ω—ã: {len(filtered_df)}")

# --- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–∞—Å—ã ---
st.subheader("üõ∞Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–∞—Å—ã")

m = folium.Map(location=[43.5, 70.0], zoom_start=4)

for _, row in filtered_df.iterrows():
    color = "red" if row["–±–æ–ª–∂–∞—É_“õ–∞—É—ñ–ø"] == 1 else "green"
    popup_info = (
        f"<b>{row['–Ω–æ–º–µ—Ä_–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞']}</b><br>"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {row['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞_C']:.1f}¬∞C<br>"
        f"–´–ª“ì–∞–ª–¥—ã–ª—ã“õ: {row['—ã–ª“ì–∞–ª–¥—ã–ª—ã“õ_–ø–∞–π—ã–∑']:.1f}%<br>"
        f"–í–∏–±—Ä–∞—Ü–∏—è: {row['–≤–∏–±—Ä–∞—Ü–∏—è_GPS']:.2f} G<br>"
        f"“ö–∞—É—ñ–ø: {'–ò”ô' if row['–±–æ–ª–∂–∞—É_“õ–∞—É—ñ–ø'] else '–ñ–æ“õ'}<br>"
        f"–ñ–µ—Ç–∫—ñ–∑—É –∫“Ø–Ω—ñ: {row['–¥–∞—Ç–∞_–∂–µ—Ç–∫—ñ–∑—É'].strftime('%Y-%m-%d')}"
    )
    folium.CircleMarker(
        location=[row["lat"], row["lon"]],
        radius=6,
        color=color,
        fill=True,
        fill_color=color,
        fill_opacity=0.7,
        popup=popup_info
    ).add_to(m)

st_folium(m, width=1000, height=600)